name: Load Test

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration (e.g., 5m, 10m)'
        required: true
        default: '5m'
        type: string
      users:
        description: 'Number of virtual users'
        required: true
        default: '50'
        type: string
      ramp_up:
        description: 'Ramp up duration (e.g., 2m)'
        required: true
        default: '2m'
        type: string

env:
  TF_CLOUD_ORGANIZATION: "aws-platform"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  get-webapp-url:
    name: Get Webapp URL
    runs-on: ubuntu-latest
    outputs:
      webapp_url: ${{ steps.get_url.outputs.webapp_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Get webapp URL from Terraform output
        id: get_url
        run: |
          cd infra/tier3_deployments
          terraform init
          terraform refresh
          ARGOCD_URL=$(terraform output -raw argocd_url)
          # Extract the LoadBalancer hostname
          LB_HOST=$(echo "$ARGOCD_URL" | sed 's|http://||')
          # Use the same LoadBalancer for webapp (nginx ingress uses same LB)
          echo "webapp_url=http://$LB_HOST" >> $GITHUB_OUTPUT
          echo "Webapp URL: http://$LB_HOST"

  load-test:
    name: Run Load Test
    runs-on: ubuntu-latest
    needs: get-webapp-url
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create k6 test script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            stages: [
              { duration: '${{ inputs.ramp_up }}', target: ${{ inputs.users }} }, // Ramp up
              { duration: '${{ inputs.duration }}', target: ${{ inputs.users }} }, // Stay at target
              { duration: '1m', target: 0 }, // Ramp down
            ],
          };

          export default function () {
            // Mix of regular requests and CPU-intensive requests
            const useLoadTest = Math.random() > 0.3; // 70% load test, 30% regular
            
            let response;
            if (useLoadTest) {
              // CPU-intensive endpoint with varying load
              const iterations = Math.floor(Math.random() * 2000000) + 500000; // 500k-2.5M iterations
              response = http.get(`${{ needs.get-webapp-url.outputs.webapp_url }}/load-test?iterations=${iterations}`);
            } else {
              // Regular endpoint
              response = http.get('${{ needs.get-webapp-url.outputs.webapp_url }}/');
            }
            
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 2000ms': (r) => r.timings.duration < 2000,
            });
            
            // Shorter sleep for more aggressive load
            sleep(Math.random() * 2); // 0-2s random sleep
          }
          EOF

      - name: Run k6 load test
        run: |
          echo "üöÄ Starting load test with ${{ inputs.users }} users for ${{ inputs.duration }}"
          echo "üìç Target URL: ${{ needs.get-webapp-url.outputs.webapp_url }}"
          echo "‚è±Ô∏è  Ramp up: ${{ inputs.ramp_up }}"
          
          k6 run --out json=results.json load-test.js

      - name: Display test results
        if: always()
        run: |
          echo "## üìä Load Test Results"
          echo ""
          echo "**Test Configuration:**"
          echo "- Users: ${{ inputs.users }}"
          echo "- Duration: ${{ inputs.duration }}"
          echo "- Ramp up: ${{ inputs.ramp_up }}"
          echo "- Target: ${{ needs.get-webapp-url.outputs.webapp_url }}"
          echo ""
          
          if [ -f results.json ]; then
            echo "**Key Metrics:**"
            echo "- Total Requests: $(jq -r '.metrics.http_reqs.values.count' results.json 2>/dev/null || echo 'N/A')"
            echo "- Failed Requests: $(jq -r '.metrics.http_req_failed.values.rate' results.json 2>/dev/null || echo 'N/A')"
            echo "- Average Response Time: $(jq -r '.metrics.http_req_duration.values.avg' results.json 2>/dev/null || echo 'N/A')ms"
            echo "- 95th Percentile: $(jq -r '.metrics.http_req_duration.values["p(95)"]' results.json 2>/dev/null || echo 'N/A')ms"
          fi
          
          echo ""
          echo "## üîç Next Steps"
          echo "1. Check AWS CloudWatch dashboard for scaling activity"
          echo "2. Monitor SNS alerts for threshold breaches"
          echo "3. Verify HPA scaling: \`kubectl get hpa -n thrive-webapp\`"
          echo "4. Check cluster autoscaler: \`kubectl get nodes\`"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: results.json
          retention-days: 7