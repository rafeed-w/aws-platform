name: Apply All Tiers

on:
  workflow_dispatch:

jobs:
  infrastructure-overview:
    name: Infrastructure Overview
    runs-on: ubuntu-latest
    steps:
      - name: Infrastructure Overview
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # AWS Platform Infrastructure Deployment
          
          This workflow will deploy a complete, scalable AWS platform infrastructure across multiple tiers. All relevant details will be updated below as each tier completes.
          
          ## Deployment Plan
          
          ### Infrastructure Tiers
          - **Tier 0**: Terraform Cloud configuration (prerequisite)
          - **Tier 1**: Network infrastructure (VPC, subnets, security groups)
          - **Tier 2**: Compute resources (EKS cluster, node groups)
          - **Tier 3**: Application deployments (ArgoCD, webapp manifests)
          - **Tier 4**: Monitoring and observability (CloudWatch dashboards, alerts)
          
          ### Expected Timeline
          - Total deployment time: ~20-25 minutes
          - Tier 2 (EKS cluster) may take longer (~8-10 minutes)
          
          ### What to Expect
          - Real-time progress updates will appear below
          - Access URLs and credentials will be provided after each tier
          - Final summary with all links will be available at completion
          
          ---
          
          ## Live Progress Updates
          EOF

  apply-tier1-network:
    name: Apply Tier1 Network
    runs-on: ubuntu-latest
    needs: infrastructure-overview
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier1_network

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier1_network

      - name: Tier1 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Infrastructure Progress

          ### Completed Tiers
          - ✅ **Tier1**: Network (VPC, subnets, security groups)

          ### Next Steps
          - Applying Tier2: Compute (EKS cluster, node groups)
          EOF

  apply-tier2-compute:
    name: Apply Tier2 Compute
    runs-on: ubuntu-latest
    needs: apply-tier1-network
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier2_compute

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier2_compute

      - name: Tier2 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Infrastructure Progress

          ### Completed Tiers
          - ✅ **Tier1**: Network (VPC, subnets, security groups)
          - ✅ **Tier2**: Compute (EKS cluster, node groups)

          ### EKS Cluster Access
          Configure kubectl to access the cluster:
          \`\`\`bash
          aws eks update-kubeconfig --region us-east-2 --name thrive-test-eks
          \`\`\`

          ### Next Steps
          - Applying Tier3: Deployments (ArgoCD, webapp manifests)
          EOF

  apply-tier3-deployments:
    name: Apply Tier3 Deployments
    runs-on: ubuntu-latest
    needs: apply-tier2-compute
    permissions:
      contents: read
      actions: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION ;
            secret/data/platform github_token | GITHUB_PAT ;
            secret/data/aws account_id | AWS_ACCOUNT_ID ;
            secret/data/platform aws_region | AWS_REGION ;
            secret/data/platform github_owner | GITHUB_OWNER ;
            secret/data/platform github_repo | GITHUB_REPO

      - name: Expose Non-Secret Variables
        id: expose_vars
        run: |
          echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "aws_account_id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "github_owner=$GITHUB_OWNER" >> $GITHUB_OUTPUT
          echo "github_repo=$GITHUB_REPO" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier3_deployments

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier3_deployments

      - name: Get ArgoCD URL
        id: argocd_url
        run: |
          cd infra/tier3_deployments
          ARGOCD_URL=$(terraform output -raw argocd_url)
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "argocd_url=$ARGOCD_URL" >> $GITHUB_OUTPUT
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT
          echo "ArgoCD URL: $ARGOCD_URL"

      - name: Tier3 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Infrastructure Progress

          ### Completed Tiers
          - ✅ **Tier1**: Network (VPC, subnets, security groups)
          - ✅ **Tier2**: Compute (EKS cluster, node groups)
          - ✅ **Tier3**: Deployments (ArgoCD, webapp manifests)

          ### Important Links
          | Service | URL | Description |
          |---------|-----|-------------|
          | ArgoCD | [${{ steps.argocd_url.outputs.argocd_url }}](${{ steps.argocd_url.outputs.argocd_url }}) | GitOps deployment UI |

          ### Default Credentials
          - ArgoCD: Username: admin / Password: admin

          ### Next Steps
          1. **Trigger WebApp Build**: Go to Actions tab → Select "Build and Push WebApp to ECR" workflow → Click "Run workflow" button → Select version type from dropdown
          2. Wait 2-3 minutes for LoadBalancer to be fully ready
              - If the ArgoCD webapp is in a degraded state, it is likely that the image version is not yet available in ECR. The WebApp Build workflow has a dropdown to trigger major, minor, or patch versions
          3. Check ArgoCD login and verify apps are syncing
          4. Applying Tier4: Monitoring (CloudWatch dashboards, alerts)
          EOF

  apply-tier4-monitoring:
    name: Apply Tier4 Monitoring
    runs-on: ubuntu-latest
    needs: apply-tier3-deployments
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier4_monitoring

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier4_monitoring

      - name: Final Infrastructure Summary
        run: |
          cd infra/tier4_monitoring
          MONITORING_INFO=$(terraform output -raw monitoring_info)

          # Extract URLs from monitoring info
          DASHBOARD_URL=$(echo "$MONITORING_INFO" | grep -o 'https://[^[:space:]]*dashboards[^[:space:]]*')
          CONTAINER_INSIGHTS_URL=$(echo "$MONITORING_INFO" | grep -o 'https://[^[:space:]]*container-insights[^[:space:]]*')

          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## AWS Platform Infrastructure Applied

          ### Completed Tiers
          - Tier1: Network (VPC, subnets, security groups)
          - Tier2: Compute (EKS cluster, node groups)  
          - Tier3: Deployments (ArgoCD, webapp manifests)
          - Tier4: Monitoring (CloudWatch dashboards, alerts)

          ### Monitoring Links
          | Service | URL | Description |
          |---------|-----|-------------|
          | CloudWatch Dashboard | [Custom Dashboard]($DASHBOARD_URL) | Application metrics |
          | Container Insights | [EKS Monitoring]($CONTAINER_INSIGHTS_URL) | Detailed container metrics |


          ### Next Steps
          1. Ensure WebApp Build workflow was triggered
          2. Access monitoring dashboards to verify metrics collection

          ### Additional Information
          - Detailed terraform outputs available in workflow step logs above
          - All infrastructure components are ready for application deployment
          EOF
