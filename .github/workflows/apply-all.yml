name: Apply All Tiers

on:
  workflow_dispatch:

jobs:
  apply-tier1-network:
    name: Apply Tier1 Network
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for OIDC JWT authentication

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin # Required for HCP Vault
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier1_network

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier1_network

      - name: Tier1 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Infrastructure Progress
          
          ### Completed Tiers
          - ✅ **Tier1**: Network (VPC, subnets, security groups)
          
          ### Next Steps
          - Applying Tier2: Compute (EKS cluster, node groups)
          EOF

  apply-tier2-compute:
    name: Apply Tier2 Compute
    runs-on: ubuntu-latest
    needs: apply-tier1-network
    permissions:
      contents: read
      id-token: write # Required for OIDC JWT authentication

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin # Required for HCP Vault
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier2_compute

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier2_compute

      - name: Tier2 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Infrastructure Progress
          
          ### Completed Tiers
          - ✅ **Tier1**: Network (VPC, subnets, security groups)
          - ✅ **Tier2**: Compute (EKS cluster, node groups)
          
          ### EKS Cluster Access
          Configure kubectl to access the cluster:
          \`\`\`bash
          aws eks update-kubeconfig --region us-east-2 --name thrive-test-eks-cluster
          \`\`\`
          
          ### Next Steps
          - Applying Tier3: Deployments (ArgoCD, webapp manifests)
          EOF

  apply-tier3-deployments:
    name: Apply Tier3 Deployments
    runs-on: ubuntu-latest
    needs: apply-tier2-compute
    permissions:
      contents: read
      actions: write # Required to trigger other workflows
      id-token: write # Required for OIDC JWT authentication

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin # Required for HCP Vault
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION ;
            secret/data/platform github_token | GITHUB_PAT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier3_deployments

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier3_deployments

      - name: Get ArgoCD URL
        id: argocd_url
        run: |
          cd infra/tier3_deployments
          ARGOCD_URL=$(terraform output -raw argocd_url)
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "argocd_url=$ARGOCD_URL" >> $GITHUB_OUTPUT
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT
          echo "ArgoCD URL: $ARGOCD_URL"

      - name: Tier3 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Infrastructure Progress
          
          ### Completed Tiers
          - ✅ **Tier1**: Network (VPC, subnets, security groups)
          - ✅ **Tier2**: Compute (EKS cluster, node groups)
          - ✅ **Tier3**: Deployments (ArgoCD, webapp manifests)
          
          ### Important Links
          | Service | URL | Description |
          |---------|-----|-------------|
          | ArgoCD | [${{ steps.argocd_url.outputs.argocd_url }}](${{ steps.argocd_url.outputs.argocd_url }}) | GitOps deployment UI |
          | ECR Repository | [${{ steps.argocd_url.outputs.ecr_url }}](${{ steps.argocd_url.outputs.ecr_url }}) | Container registry |
          
          ### Default Credentials
          - ArgoCD: Username: admin / Password: admin
          
          ### EKS Cluster Access
          Configure kubectl to access the cluster:
          \`\`\`bash
          aws eks update-kubeconfig --region us-east-2 --name thrive-test-eks-cluster
          \`\`\`
          
          ### Next Steps
          1. **Trigger WebApp Build**: [Build and Push WebApp to ECR](../actions/workflows/webapp-build-push.yml) workflow
          2. Wait 2-3 minutes for LoadBalancer to be fully ready
          3. Check ArgoCD login and verify apps are syncing
          4. Applying Tier4: Monitoring (CloudWatch dashboards, alerts)
          EOF

  apply-tier4-monitoring:
    name: Apply Tier4 Monitoring
    runs-on: ubuntu-latest
    needs: apply-tier3-deployments
    permissions:
      contents: read
      id-token: write # Required for OIDC JWT authentication

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin # Required for HCP Vault
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra/tier4_monitoring

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./infra/tier4_monitoring

      - name: Final Infrastructure Summary
        run: |
          cd infra/tier4_monitoring
          MONITORING_INFO=$(terraform output -raw monitoring_info)

          # Extract URLs from monitoring info
          DASHBOARD_URL=$(echo "$MONITORING_INFO" | grep -o 'https://[^[:space:]]*dashboards[^[:space:]]*')
          CONTAINER_INSIGHTS_URL=$(echo "$MONITORING_INFO" | grep -o 'https://[^[:space:]]*container-insights[^[:space:]]*')

          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## AWS Platform Infrastructure Applied

          ### Completed Tiers
          - Tier1: Network (VPC, subnets, security groups)
          - Tier2: Compute (EKS cluster, node groups)  
          - Tier3: Deployments (ArgoCD, webapp manifests)
          - Tier4: Monitoring (CloudWatch dashboards, alerts)

          ### Monitoring Links
          | Service | URL | Description |
          |---------|-----|-------------|
          | CloudWatch Dashboard | [Custom Dashboard]($DASHBOARD_URL) | Application metrics |
          | Container Insights | [EKS Monitoring]($CONTAINER_INSIGHTS_URL) | Detailed container metrics |

          ### EKS Cluster Access
          Configure kubectl to access the cluster:
          \`\`\`bash
          aws eks update-kubeconfig --region us-east-2 --name thrive-test-eks-cluster
          \`\`\`

          ### Next Steps
          1. Trigger WebApp Build workflow to deploy application
          2. Wait 2-3 minutes for LoadBalancer to be fully ready
          3. Access monitoring dashboards to verify metrics collection
          4. Configure email notifications in SNS console

          ### Additional Information
          - Detailed terraform outputs available in workflow step logs above
          - All infrastructure components are ready for application deployment
          EOF
