name: Terraform PR Plan

on:
  pull_request:
    branches: [main]
    paths:
      - 'infra/**/*.tf'
      - 'infra/**/*.tfvars'
      - '.github/workflows/terraform-*.yml'

env:
  TF_CLOUD_ORGANIZATION: "aws-platform"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  detect-changes:
    name: Detect Changed Terraform Directories
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-changes: ${{ steps.set-matrix.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            infra/**/*.tf
            infra/**/*.tfvars
          dir_names: true
          dir_names_max_depth: 2
          json: true

      - name: Set matrix for parallel execution
        id: set-matrix
        run: |
          echo "Changed directories: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          # Extract workspace names from changed directories
          WORKSPACES=()
          for dir in $(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -r '.[]'); do
            if [[ $dir =~ ^infra/([^/]+)$ ]]; then
              workspace="${BASH_REMATCH[1]}"
              case $workspace in
                tier0_tfc|tier1_network|tier2_compute|tier3_deployments|tier4_monitoring)
                  WORKSPACES+=("$workspace")
                  ;;
              esac
            fi
          done
          
          # Remove duplicates and create JSON array
          UNIQUE_WORKSPACES=($(printf "%s\n" "${WORKSPACES[@]}" | sort -u))
          MATRIX_JSON=$(printf '%s\n' "${UNIQUE_WORKSPACES[@]}" | jq -R . | jq -s .)
          
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT
          if [ ${#UNIQUE_WORKSPACES[@]} -gt 0 ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Terraform workspaces to plan: ${UNIQUE_WORKSPACES[*]}"

  terraform-plan:
    name: Plan - ${{ matrix.workspace }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        workspace: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ matrix.workspace }}
          directory: ./infra/${{ matrix.workspace }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ matrix.workspace }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v7
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'User' && comment.body.includes('Terraform Plan: ${{ matrix.workspace }}')
            })

            // 2. Prepare format of the comment
            const output = `## ðŸ“‹ Terraform Plan: \`${{ matrix.workspace }}\`
            
            **Plan Status:** \`${{ steps.plan-run.outputs.run_status }}\`
            **Workspace:** [\`${{ matrix.workspace }}\`](https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ matrix.workspace }})
            **Run:** [\`${{ steps.plan-run.outputs.run_id }}\`](https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ matrix.workspace }}/runs/${{ steps.plan-run.outputs.run_id }})

            <details><summary>Show Output</summary>

            \`\`\`
            ${{ steps.plan-output.outputs.plan }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`infra/${{ matrix.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              })
            }