name: Tier2 Compute

on:
  pull_request:
    branches: [main]
    paths:
      - 'infra/tier2_compute/**'
  push:
    branches: [main]
    paths:
      - 'infra/tier2_compute/**'
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: "aws-platform"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  WORKSPACE_NAME: "tier2_compute"
  WORKSPACE_DIR: "infra/tier2_compute"

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment: terraform-plan
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./${{ env.WORKSPACE_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./${{ env.WORKSPACE_DIR }}
        continue-on-error: true

      - name: Update PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'User' && comment.body.includes('Terraform Plan: ${{ env.WORKSPACE_NAME }}')
            })

            const output = `## ðŸ“‹ Terraform Plan: \`${{ env.WORKSPACE_NAME }}\`
            
            **Plan Status:** \`${{ steps.plan.outcome }}\`
            **Workspace:** [\`${{ env.WORKSPACE_NAME }}\`](https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.WORKSPACE_NAME }})

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKSPACE_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              })
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: terraform-apply
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ env.WORKSPACE_NAME }}
          directory: ./${{ env.WORKSPACE_DIR }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ env.WORKSPACE_NAME }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
          plan_only: false

      - name: Apply Run
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Applied via GitHub Actions by @${{ github.actor }}"

      - name: Display Apply Results
        run: |
          echo "### âœ… Terraform Apply: ${{ env.WORKSPACE_NAME }}"
          echo "**Status:** ${{ steps.apply.outputs.apply_status }}"
          echo "**Run ID:** ${{ steps.apply-run.outputs.run_id }}"
          echo "**Workspace:** https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.WORKSPACE_NAME }}"