name: Terraform Apply

on:
  push:
    branches: [main]
    paths:
      - 'infra/**/*.tf'
      - 'infra/**/*.tfvars'
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Specific workspace to apply (optional)'
        required: false
        type: choice
        options:
          - 'all'
          - 'tier0_tfc'
          - 'tier1_network'
          - 'tier2_compute'
          - 'tier3_deployments'
          - 'tier4_monitoring'
        default: 'all'

env:
  TF_CLOUD_ORGANIZATION: "aws-platform"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  detect-changes:
    name: Detect Changed Terraform Directories
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-changes: ${{ steps.set-matrix.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files (for push events)
        if: github.event_name == 'push'
        id: changed-files-push
        uses: tj-actions/changed-files@v44
        with:
          files: |
            infra/**/*.tf
            infra/**/*.tfvars
          dir_names: true
          dir_names_max_depth: 2
          json: true

      - name: Set matrix for parallel execution
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger
            if [ "${{ github.event.inputs.workspace }}" == "all" ]; then
              WORKSPACES=("tier0_tfc" "tier1_network" "tier2_compute" "tier3_deployments" "tier4_monitoring")
            else
              WORKSPACES=("${{ github.event.inputs.workspace }}")
            fi
          else
            # Push trigger - detect changes
            echo "Changed directories: ${{ steps.changed-files-push.outputs.all_changed_files }}"
            
            WORKSPACES=()
            for dir in $(echo '${{ steps.changed-files-push.outputs.all_changed_files }}' | jq -r '.[]'); do
              if [[ $dir =~ ^infra/([^/]+)$ ]]; then
                workspace="${BASH_REMATCH[1]}"
                case $workspace in
                  tier0_tfc|tier1_network|tier2_compute|tier3_deployments|tier4_monitoring)
                    WORKSPACES+=("$workspace")
                    ;;
                esac
              fi
            done
          fi
          
          # Remove duplicates and create JSON array
          UNIQUE_WORKSPACES=($(printf "%s\n" "${WORKSPACES[@]}" | sort -u))
          MATRIX_JSON=$(printf '%s\n' "${UNIQUE_WORKSPACES[@]}" | jq -R . | jq -s .)
          
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT
          if [ ${#UNIQUE_WORKSPACES[@]} -gt 0 ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Terraform workspaces to apply: ${UNIQUE_WORKSPACES[*]}"

  terraform-plan:
    name: Plan - ${{ matrix.workspace }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    environment: terraform-plan
    strategy:
      matrix:
        workspace: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    outputs:
      run_id: ${{ steps.plan-run.outputs.run_id }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ matrix.workspace }}
          directory: ./infra/${{ matrix.workspace }}

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ matrix.workspace }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Display Plan
        run: |
          echo "### üìã Terraform Plan: ${{ matrix.workspace }}"
          echo "**Status:** ${{ steps.plan-run.outputs.run_status }}"
          echo "**Run ID:** ${{ steps.plan-run.outputs.run_id }}"
          echo ""
          echo "**Plan Output:**"
          echo "${{ steps.plan-output.outputs.plan }}"

  terraform-apply:
    name: Apply - ${{ matrix.workspace }}
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-plan]
    if: needs.detect-changes.outputs.has-changes == 'true'
    environment: terraform-apply
    strategy:
      matrix:
        workspace: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ matrix.workspace }}
          directory: ./infra/${{ matrix.workspace }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ matrix.workspace }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
          plan_only: false

      - name: Apply Run
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Applied via GitHub Actions by @${{ github.actor }}"

      - name: Display Apply Results
        run: |
          echo "### ‚úÖ Terraform Apply: ${{ matrix.workspace }}"
          echo "**Status:** ${{ steps.apply.outputs.apply_status }}"
          echo "**Run ID:** ${{ steps.apply-run.outputs.run_id }}"

  apply-summary:
    name: Apply Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-apply]
    if: always() && needs.detect-changes.outputs.has-changes == 'true'
    steps:
      - name: Summary
        run: |
          echo "## üöÄ Terraform Apply Summary"
          echo ""
          if [ "${{ needs.terraform-apply.result }}" == "success" ]; then
            echo "‚úÖ All terraform applies completed successfully"
          else
            echo "‚ùå Some terraform applies failed"
            exit 1
          fi
          echo ""
          echo "**Workspaces:** ${{ needs.detect-changes.outputs.matrix }}"
          echo "**Triggered by:** @${{ github.actor }}"
          echo "**Event:** ${{ github.event_name }}"