name: Tier4 Monitoring

on:
  pull_request:
    branches: [main]
    paths:
      - 'infra/tier4_monitoring/**'
  push:
    branches: [main]
    paths:
      - 'infra/tier4_monitoring/**'
  workflow_dispatch:

env:
  WORKSPACE_NAME: "tier4_monitoring"
  WORKSPACE_DIR: "infra/tier4_monitoring"

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
    environment: terraform-plan
    permissions:
      contents: read
      pull-requests: write
      id-token: write  # Required for OIDC JWT authentication
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin  # Required for HCP Vault
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./${{ env.WORKSPACE_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./${{ env.WORKSPACE_DIR }}
        continue-on-error: true

      - name: Check for changes
        id: changes
        run: |
          if echo "${{ steps.plan.outputs.stdout }}" | grep -q "No changes"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Update PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'User' && comment.body.includes('Terraform Plan: ${{ env.WORKSPACE_NAME }}')
            })

            const output = `## ðŸ“‹ Terraform Plan: \`${{ env.WORKSPACE_NAME }}\`
            
            **Plan Status:** \`${{ steps.plan.outcome }}\`
            **Workspace:** [\`${{ env.WORKSPACE_NAME }}\`](https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.WORKSPACE_NAME }})

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKSPACE_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              })
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.terraform-plan.outputs.has_changes == 'true'
    environment: terraform-apply
    permissions:
      contents: read
      id-token: write  # Required for OIDC JWT authentication
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          namespace: admin  # Required for HCP Vault
          method: jwt
          role: github-actions-role
          secrets: |
            secret/data/terraform token | TF_API_TOKEN ;
            secret/data/terraform organization | TF_CLOUD_ORGANIZATION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./${{ env.WORKSPACE_DIR }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./${{ env.WORKSPACE_DIR }}

      - name: Display Apply Results
        run: |
          echo "### âœ… Terraform Apply: ${{ env.WORKSPACE_NAME }}"
          echo "**Status:** ${{ steps.apply.outcome }}"
          echo "**Workspace:** https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.WORKSPACE_NAME }}"